{"version":3,"sources":["redux/reducers/mapFilterReducer.js","redux/store.js","redux/actions/fetchConutryData.js","components/GooglePlacesInput/GooglePlacesInput.js","components/App/App.js","index.js"],"names":["initialState","name","country","lat","lng","mapFilterReducer","state","action","type","payload","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","configureStore","preloadedState","createStore","combineReducers","form","formReducer","applyMiddleware","reduxThunk","reduxLogger","fetchCountryData","console","log","store","dispatch","GoogleAutocomplete","field","input","id","GooglePlacesInputReduxForm","reduxForm","props","Field","component","placeholder","GooglePlacesInput","autocomplete","google","maps","places","Autocomplete","document","querySelector","setFields","addListener","place","getPlace","geometry","address","address_components","forEach","adr","short_name","length","location","className","Component","connect","App","ReactDOM","render","getElementById"],"mappings":"gUAAMA,EAAe,CACjBC,KAAM,GACNC,QAAS,GACTC,IAAK,GACLC,IAAK,IAmBMC,EAhBU,WAAmC,IAAlCC,EAAiC,uDAAzBN,EAAcO,EAAW,uCACvD,OAAQA,EAAOC,MACX,IAAK,qBACD,MAAO,CACHP,KAAMM,EAAOE,QAAQR,KACrBC,QAASK,EAAOE,QAAQP,QACxBC,IAAKI,EAAOE,QAAQN,IACpBC,IAAKG,EAAOE,QAAQL,KAG5B,QACI,OAAOE,I,SCZbI,EAAmBC,OAAOC,sCAAwCC,IAazDC,MAXf,WAA8C,IAAtBC,EAAqB,uDAAJ,GACrC,OAAOC,YACHC,YAAgB,CACZZ,mBACAa,KAAMC,MAEVJ,EACAL,EAAiBU,YAAgBC,IAAYC,OAItCR,GCjBA,SAASS,EAAiBrB,GACrCsB,QAAQC,IAAIvB,GACZ,IAAIK,EAAS,CACTC,KAAM,qBACNC,QAASP,GAEbwB,EAAMC,SAASpB,G,6BCDfqB,EAAqB,SAACC,GACtB,OAAO,2CAAWA,EAAMC,MAAjB,CAAwBC,GAAIF,EAAME,GAAIvB,KAAK,WASlDwB,EAA6BC,YAAU,CAEvCf,KAAM,oBAFuBe,CANL,SAAAC,GACxB,OAAO,8BACH,kBAACC,EAAA,EAAD,CAAOlC,KAAK,MAAMmC,UAAWR,EAAoBS,YAAY,MAAMN,GAAG,iBASxEO,E,4LAGE,IAAMC,EAAe,IAAI5B,OAAO6B,OAAOC,KAAKC,OAAOC,aAE/CC,SAASC,cAAc,eAI3BN,EAAaO,UAAU,CACnB,qBACA,WACA,OACA,SAGJP,EAAaQ,YAAY,gBAAiB,WACtC,IAAMC,EAAQT,EAAaU,WAC3B,GAAKD,EAAME,SAAX,CAGA,IAAIC,EAAU,GACVH,EAAMI,oBACNJ,EAAMI,mBAAmBC,QAAQ,SAAAC,GACC,IAA1BA,EAAIC,WAAWC,SACfL,EAAUG,EAAIC,cAUtBhC,EANgB,CAChBtB,KAAM+C,EAAM/C,KACZC,QAASiD,EACThD,IAAK6C,EAAME,SAASO,SAAStD,MAC7BC,IAAK4C,EAAME,SAASO,SAASrD,a,+BAQrC,OACI,yBAAKsD,UAAU,WAAW3B,GAAG,YACzB,yBAAKA,GAAG,iBACJ,kBAACC,EAAD,Y,GA5CY2B,aAmDjBC,cACX,KACA,CAAErC,oBAFSqC,CAGbtB,G,OC9DauB,MATf,WACI,OACI,yBAAKH,UAAU,OAAf,mBAEI,kBAAC,EAAD,Q,OCAZI,IAASC,OACL,kBAAC,IAAD,CAAUrC,MAAOA,GACb,kBAAC,EAAD,OAEJkB,SAASoB,eAAe,U","file":"static/js/main.06037e8e.chunk.js","sourcesContent":["const initialState = {\n    name: '',\n    country: '',\n    lat: '',\n    lng: '',\n};\n\nconst mapFilterReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case 'FETCH_COUNTRY_DATA': {\n            return {\n                name: action.payload.name,\n                country: action.payload.country,\n                lat: action.payload.lat,\n                lng: action.payload.lng,\n            };\n        }\n        default: {\n            return state;\n        }\n    }\n};\n\nexport default mapFilterReducer;\n","import reduxLogger from 'redux-logger';\nimport { createStore, applyMiddleware, compose, combineReducers } from 'redux';\nimport reduxThunk from 'redux-thunk';\nimport mapFilterReducer from './reducers/mapFilterReducer';\nimport { reducer as formReducer } from 'redux-form';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nfunction configureStore(preloadedState = {}) {\n    return createStore(\n        combineReducers({\n            mapFilterReducer,\n            form: formReducer\n        }),\n        preloadedState,\n        composeEnhancers(applyMiddleware(reduxThunk, reduxLogger))\n    );\n}\n\nexport default configureStore();","import store from './../store';\n\nexport default function fetchCountryData(country) {\n    console.log(country);\n    let action = {\n        type: 'FETCH_COUNTRY_DATA',\n        payload: country,\n    };\n    store.dispatch(action);\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport fetchCountryData from '../../redux/actions/fetchConutryData';\n\nimport './GooglePlacesInput.css';\nimport {Field, reduxForm} from \"redux-form\";\n\nlet GoogleAutocomplete = (field) => {\n    return <input {...field.input} id={field.id} type=\"text\"/>\n};\n\nlet GooglePlacesInputForm = props => {\n    return <form>\n        <Field name=\"geo\" component={GoogleAutocomplete} placeholder=\"geo\" id=\"pac-input\"/>\n    </form>\n};\n\nlet GooglePlacesInputReduxForm = reduxForm({\n    // a unique name for the form\n    form: 'googlePlaceInput'\n})(GooglePlacesInputForm);\n\nclass GooglePlacesInput extends Component {\n\n    componentDidMount() {\n        const autocomplete = new window.google.maps.places.Autocomplete(\n            //TODO: should use ref instead\n            document.querySelector('#pac-input')\n        );\n\n        // Set the data fields to return when the user selects a place.\n        autocomplete.setFields([\n            'address_components',\n            'geometry',\n            'icon',\n            'name',\n        ]);\n\n        autocomplete.addListener('place_changed', function() {\n            const place = autocomplete.getPlace();\n            if (!place.geometry) {\n                return;\n            }\n            let address = '';\n            if (place.address_components) {\n                place.address_components.forEach(adr => {\n                    if (adr.short_name.length === 2) {\n                        address = adr.short_name;\n                    }\n                });\n            }\n            const countryData = {\n                name: place.name,\n                country: address,\n                lat: place.geometry.location.lat(),\n                lng: place.geometry.location.lng(),\n            };\n                fetchCountryData(countryData);\n        });\n    }\n\n\n    render() {\n        return (\n            <div className=\"pac-card\" id=\"pac-card\">\n                <div id=\"pac-container\">\n                    <GooglePlacesInputReduxForm/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default connect(\n    null,\n    { fetchCountryData }\n)(GooglePlacesInput);\n","import React from 'react';\nimport { GooglePlacesInput } from '../GooglePlacesInput';\n\nimport './App.css';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            Enter a location\n            <GooglePlacesInput />\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport { App } from './components/App';\nimport store from './redux/store';\n\nimport './index.css';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}